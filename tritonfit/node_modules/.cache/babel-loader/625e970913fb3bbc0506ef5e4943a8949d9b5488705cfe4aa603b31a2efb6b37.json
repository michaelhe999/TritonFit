{"ast":null,"code":"import { Difficulty } from \"../types/workout\";\nconst mapDifficulty = difficulty => {\n  switch (difficulty.toUpperCase()) {\n    case \"BEGINNER\":\n      return Difficulty.BEGINNER;\n    case \"INTERMEDIATE\":\n      return Difficulty.INTERMEDIATE;\n    case \"ADVANCED\":\n      return Difficulty.ADVANCED;\n    default:\n      return Difficulty.INTERMEDIATE;\n  }\n};\nexport const generateWorkout = async formResponse => {\n  try {\n    const rawResponse = await fetch(\"https://openrouter.ai/api/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer 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`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"model\": \"meta-llama/llama-3.2-3b-instruct:free\",\n        \"messages\": [{\n          \"role\": \"user\",\n          \"content\": `give me 2-4 workouts with 7-12 each exercises for a ${formResponse.gender} ${formResponse.level} person who has a goal of ${formResponse.goal} wants to focus on ${formResponse.targetArea} for ${formResponse.duration} long in the form of a json schema raw data like this: {workouts: [workoutName: string, workoutDuration: number, workoutDescription:string, workoutDifficulty: (BEGINNER, INTERMEDIATE, or ADVANCED) exercises: [{name: string, sets: number, reps:string}]]} nothing except the json, make sure the json form is correct.`\n        }]\n      })\n    });\n    if (!rawResponse.ok) {\n      throw new Error('response not ok');\n    }\n    const apiResponse = await rawResponse.json();\n    const content = apiResponse.choices[0].message.content;\n    const cleanContent = content.replace(/```/g, \"\").trim();\n    console.log(cleanContent);\n    try {\n      const workoutData = JSON.parse(cleanContent);\n      workoutData.workouts = workoutData.workouts.map(workout => {\n        return {\n          ...workout,\n          workoutDifficulty: mapDifficulty(workout.workoutDifficulty)\n        };\n      });\n      return workoutData;\n    } catch (error) {\n      throw new Error(\"Invalid JSON format\");\n    }\n  } catch (error) {\n    console.log(error);\n    throw new Error('failed to generate workout');\n  }\n};","map":{"version":3,"names":["Difficulty","mapDifficulty","difficulty","toUpperCase","BEGINNER","INTERMEDIATE","ADVANCED","generateWorkout","formResponse","rawResponse","fetch","method","headers","body","JSON","stringify","gender","level","goal","targetArea","duration","ok","Error","apiResponse","json","content","choices","message","cleanContent","replace","trim","console","log","workoutData","parse","workouts","map","workout","workoutDifficulty","error"],"sources":["/Users/emmaz/Documents/GitHub/TritonFit/tritonfit/src/utils/workoutGenerator-utils.tsx"],"sourcesContent":["import { WorkoutFormResponses, WorkoutList, Workout, Difficulty } from \"../types/workout\";\n\nconst mapDifficulty = (difficulty: string): Difficulty => {\n    switch (difficulty.toUpperCase()) {\n        case \"BEGINNER\":\n            return Difficulty.BEGINNER;\n        case \"INTERMEDIATE\":\n            return Difficulty.INTERMEDIATE;\n        case \"ADVANCED\":\n            return Difficulty.ADVANCED;\n        default:\n            return Difficulty.INTERMEDIATE;\n    }\n};\n\nexport const generateWorkout = async(formResponse: WorkoutFormResponses): Promise<WorkoutList> => {\n    try {\n        const rawResponse = await fetch(\"https://openrouter.ai/api/v1/chat/completions\", {\n            method: \"POST\",\n            headers: {\n            \"Authorization\": `Bearer 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`,\n            \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n            \"model\": \"meta-llama/llama-3.2-3b-instruct:free\",\n            \"messages\": [\n                {\n                \"role\": \"user\",\n                \"content\": `give me 2-4 workouts with 7-12 each exercises for a ${formResponse.gender} ${formResponse.level} person who has a goal of ${formResponse.goal} wants to focus on ${formResponse.targetArea} for ${formResponse.duration} long in the form of a json schema raw data like this: {workouts: [workoutName: string, workoutDuration: number, workoutDescription:string, workoutDifficulty: (BEGINNER, INTERMEDIATE, or ADVANCED) exercises: [{name: string, sets: number, reps:string}]]} nothing except the json, make sure the json form is correct.`\n                }\n            ]\n            })\n        });\n\n        if (!rawResponse.ok) {\n            throw new Error('response not ok');\n        }\n\n        const apiResponse = await rawResponse.json();\n        const content = apiResponse.choices[0].message.content;\n\n        const cleanContent = content.replace(/```/g, \"\").trim();\n        console.log(cleanContent);\n\n        try {\n            const workoutData: WorkoutList = JSON.parse(cleanContent);\n            workoutData.workouts = workoutData.workouts.map((workout:Workout) => {\n                return {\n                    ...workout,  \n                    workoutDifficulty: mapDifficulty(workout.workoutDifficulty), \n                }\n            })\n            return workoutData;\n        } catch (error) {\n            throw new Error(\"Invalid JSON format\");\n        }\n\n    } catch (error) {\n        console.log(error);\n        throw new Error('failed to generate workout')\n    }\n\n\n      \n\n};"],"mappings":"AAAA,SAAqDA,UAAU,QAAQ,kBAAkB;AAEzF,MAAMC,aAAa,GAAIC,UAAkB,IAAiB;EACtD,QAAQA,UAAU,CAACC,WAAW,CAAC,CAAC;IAC5B,KAAK,UAAU;MACX,OAAOH,UAAU,CAACI,QAAQ;IAC9B,KAAK,cAAc;MACf,OAAOJ,UAAU,CAACK,YAAY;IAClC,KAAK,UAAU;MACX,OAAOL,UAAU,CAACM,QAAQ;IAC9B;MACI,OAAON,UAAU,CAACK,YAAY;EACtC;AACJ,CAAC;AAED,OAAO,MAAME,eAAe,GAAG,MAAMC,YAAkC,IAA2B;EAC9F,IAAI;IACA,MAAMC,WAAW,GAAG,MAAMC,KAAK,CAAC,+CAA+C,EAAE;MAC7EC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACT,eAAe,EAAE,kFAAkF;QACnG,cAAc,EAAE;MAChB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACrB,OAAO,EAAE,uCAAuC;QAChD,UAAU,EAAE,CACR;UACA,MAAM,EAAE,MAAM;UACd,SAAS,EAAE,uDAAuDP,YAAY,CAACQ,MAAM,IAAIR,YAAY,CAACS,KAAK,6BAA6BT,YAAY,CAACU,IAAI,sBAAsBV,YAAY,CAACW,UAAU,QAAQX,YAAY,CAACY,QAAQ;QACnO,CAAC;MAEL,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,CAACX,WAAW,CAACY,EAAE,EAAE;MACjB,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;IACtC;IAEA,MAAMC,WAAW,GAAG,MAAMd,WAAW,CAACe,IAAI,CAAC,CAAC;IAC5C,MAAMC,OAAO,GAAGF,WAAW,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACF,OAAO;IAEtD,MAAMG,YAAY,GAAGH,OAAO,CAACI,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;IACvDC,OAAO,CAACC,GAAG,CAACJ,YAAY,CAAC;IAEzB,IAAI;MACA,MAAMK,WAAwB,GAAGnB,IAAI,CAACoB,KAAK,CAACN,YAAY,CAAC;MACzDK,WAAW,CAACE,QAAQ,GAAGF,WAAW,CAACE,QAAQ,CAACC,GAAG,CAAEC,OAAe,IAAK;QACjE,OAAO;UACH,GAAGA,OAAO;UACVC,iBAAiB,EAAErC,aAAa,CAACoC,OAAO,CAACC,iBAAiB;QAC9D,CAAC;MACL,CAAC,CAAC;MACF,OAAOL,WAAW;IACtB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACZ,MAAM,IAAIjB,KAAK,CAAC,qBAAqB,CAAC;IAC1C;EAEJ,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACZR,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC;IAClB,MAAM,IAAIjB,KAAK,CAAC,4BAA4B,CAAC;EACjD;AAKJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}